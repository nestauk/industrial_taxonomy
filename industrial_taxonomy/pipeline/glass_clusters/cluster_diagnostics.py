""" Flow to remove low quality clusters from the text clustering outputs
"""

from typing import Dict, List, Tuple
from metaflow import FlowSpec, project, step, Parameter, current
from pandas import DataFrame
from industrial_taxonomy.pipeline.glass_clusters.sbmtm import sbmtm


@project(name="industrial_taxonomy")
class FilterClusters(FlowSpec):
    """We calculate silouhette scores for clustering outputs
    and filter those below a certain threshold

    Attributes:
        text_sectors: text sector assignments generated by the
            ClusterGlass flow
        sectors: sectors that we extracted clusters from
        models: topsbm models trained on the glass data
        sic_silouhette: sic-level silouhette scores
        cluster_silouhette: cluster-level silouhette scores
        silouhette_thres: quantile threshold for removing a text
            cluster from the data
        text_sectors_filtered: text sectors assignments after
            filtering low homogeneity clusters
    """

    text_sectors: Dict[str, List[Tuple[str, str]]]
    sectors: List[str]
    models: Dict[str, sbmtm]
    sic_silhouette: DataFrame
    cluster_silhouette: DataFrame
    silh_thres: float
    text_sectors_scores: List
    text_filtered_sectors: Dict[str, set]
    share_param: List[str]

    test_mode = Parameter("test-mode", help="run in test mode", default=True)
    silh_thres = Parameter(
        "silh-thres",
        help="silhouette threshold for cluster inclusion",
        default=0.25,
    )

    @step
    def start(self):
        """Start flow"""
        self.next(self.get_text_sectors)

    @step
    def get_text_sectors(self):
        """Read text clustering outputs"""

        from industrial_taxonomy.getters.text_sectors import (
            text_sectors,
            clustered_sectors,
            topsbm_models,
        )

        self.text_sectors = text_sectors()
        self.sectors = clustered_sectors()
        self.models = topsbm_models()
        self.share_param = list(self.text_sectors.keys())

        self.next(self.calc_silhouettes, foreach="share_param")

    @step
    def calc_silhouettes(self):
        """Calculates SIC and Cluster silhouette scores for each
        value of the share_parameter (which decided how many
        documents to use to represent a cluster)
        """

        from utils import text_sector_silhouette

        # We store a list with silhouette scores, assigned shares and sectors

        if self.test_mode is True and not current.is_production:
            sectors = self.sectors[:5]

        else:
            sectors = self.sectors

        self.silh_scores = [
            [
                text_sector_silhouette(
                    self.text_sectors[self.input], sector, self.models
                ),
                self.input,
                sector,
            ]
            for sector in sectors
        ]

        self.next(self.join_silh)

    @step
    def join_silh(self, inputs):
        """Join the silhouette scores"""

        import pandas as pd

        self.sic_silhouette = pd.DataFrame(
            [
                pd.Series(
                    {
                        "local_score": combi[0]["local_score"],
                        "sector": combi[2],
                        "assign_strategy": combi[1],
                    }
                )
                for results in inputs
                for combi in results.silh_scores
            ]
        )

        self.cluster_silhouette = pd.concat(
            [
                (
                    combi[0]["cluster_scores"]
                    .reset_index(drop=False)
                    .assign(assign_strategy=combi[1])
                    .assign(sic4=combi[2])
                )
                for results in inputs
                for combi in results.silh_scores
            ]
        )

        self.next(self.filter_on_silh_share)

    @step
    def filter_on_silh_share(self):
        """Filters clusters based on the silhouette score threshold"""

        from utils import filter_clusters

        self.text_sectors_filtered = filter_clusters(
            self.cluster_silhouette, self.silh_thres
        )

        self.next(self.end)

    @step
    def end(self):
        """Nothing to see here"""


if __name__ == "__main__":
    FilterClusters()
